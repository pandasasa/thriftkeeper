// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <iostream>
#include <stdlib.h>

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>
#include <gflags/gflags.h>
#include <thriftkeeper.h>

#include "Calculator.h"
#include "shared_types.h"

using namespace std;
using boost::shared_ptr;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using namespace ::tutorial;
using shared::SharedStruct;
using thriftkeeper::ThriftKeeper;

class CalculatorHandler: virtual public CalculatorIf {
public:
	CalculatorHandler() {
		// Your initialization goes here
	}

	void ping() {
		// Your implementation goes here
		cout << "ping" << endl;
	}

	int32_t add(const int32_t num1, const int32_t num2) {
		// Your implementation goes here
		cout << "add" << endl;
		return 0;
	}

	int32_t calculate(const int32_t logid, const Work& w) {
		// Your implementation goes here
		cout << "calculate" << endl;
		return 0;
	}

	void zip() {
		// Your implementation goes here
		cout << "zip" << endl;
	}

	void getStruct(SharedStruct& _return, const int32_t key) {
		// Your implementation goes here
		cout << "getStruct" << endl;
	}

};

DEFINE_int32(port, 9090, "Port to listen");
DEFINE_int32(worker_count, 100, "Number of threads to process request");
DEFINE_string(zk_host, "127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183",
	"Addresses of zookeeper service");
DEFINE_string(zk_service_name, "tutorial", "Name of this service in zookeeper "
	"service");
DEFINE_int32(zk_debug_level, 3, "Log level of zookeeper, 1 to 4 each "
	"means error, warn, info and debug");
DEFINE_string(zk_node_name, "", "Name of this node, it will be the hostname if "
	"not supply");

int main(int argc, char **argv) {
	google::ParseCommandLineFlags(&argc, &argv, true);

	ThriftKeeper tk(FLAGS_zk_host, (ZooLogLevel) FLAGS_zk_debug_level);
	if (!tk.registerServiceNode(FLAGS_zk_service_name, FLAGS_zk_node_name)) {
		cerr << "register service node failed" << endl;
		exit(1);
	}
	cerr << "register service node succeed" << endl;

	shared_ptr<CalculatorHandler> handler(new CalculatorHandler());
	shared_ptr<TProcessor> processor(new CalculatorProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(FLAGS_port));
	shared_ptr<TTransportFactory> transportFactory(
			new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	shared_ptr<ThreadManager> threadManager =
			ThreadManager::newSimpleThreadManager(FLAGS_worker_count);
	shared_ptr<PosixThreadFactory> threadFactory =
			shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();

	TThreadPoolServer server(processor, serverTransport, transportFactory,
			protocolFactory, threadManager);

	cout << "Starting the server..." << endl;
	server.serve();
	cout << "done." << endl;
	return 0;
}
