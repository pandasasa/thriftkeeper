// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>

#include "Calculator.h"
#include "shared_types.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

using namespace ::tutorial;

using shared::SharedStruct;

class CalculatorHandler: virtual public CalculatorIf {
public:
	CalculatorHandler() {
		// Your initialization goes here
	}

	void ping() {
		// Your implementation goes here
		printf("ping\n");
	}

	int32_t add(const int32_t num1, const int32_t num2) {
		// Your implementation goes here
		printf("add\n");
		return 0;
	}

	int32_t calculate(const int32_t logid, const Work& w) {
		// Your implementation goes here
		printf("calculate\n");
		return 0;
	}

	void zip() {
		// Your implementation goes here
		printf("zip\n");
	}

	void getStruct(SharedStruct& _return, const int32_t key) {
		// Your implementation goes here
		printf("getStruct\n");
	}

};

int main(int argc, char **argv) {
	int port = 9090;
	int workerCount = 100;
	shared_ptr<CalculatorHandler> handler(new CalculatorHandler());
	shared_ptr<TProcessor> processor(new CalculatorProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(
			new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	shared_ptr<ThreadManager> threadManager =
			ThreadManager::newSimpleThreadManager(workerCount);

	shared_ptr<PosixThreadFactory> threadFactory =
			shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();

	TThreadPoolServer server(processor, serverTransport, transportFactory,
			protocolFactory, threadManager);

	printf("Starting the server...\n");
	server.serve();
	printf("done.\n");
	return 0;
}
