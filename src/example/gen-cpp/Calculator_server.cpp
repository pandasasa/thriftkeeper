// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <iostream>
#include <stdlib.h>

#include <boost/lexical_cast.hpp>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>
#include <gflags/gflags.h>
#include <json-c/json.h>
#include <thriftkeeper.h>

#include "Calculator.h"
#include "shared_types.h"

using namespace std;
using boost::shared_ptr;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using namespace ::tutorial;
using shared::SharedStruct;

class CalculatorHandler: virtual public CalculatorIf {
public:
	CalculatorHandler() {
		// Your initialization goes here
	}

	void ping() {
		// Your implementation goes here
		cout << "ping" << endl;
	}

	int32_t add(const int32_t num1, const int32_t num2) {
		// Your implementation goes here
		cout << "add" << endl;
		return 0;
	}

	int32_t calculate(const int32_t logid, const Work& w) {
		// Your implementation goes here
		cout << "calculate" << endl;
		return 0;
	}

	void zip() {
		// Your implementation goes here
		cout << "zip" << endl;
	}

	void getStruct(SharedStruct& _return, const int32_t key) {
		// Your implementation goes here
		cout << "getStruct" << endl;
	}

};

DEFINE_int32(port, 9090, "Port to listen");
DEFINE_int32(worker_count, 100, "Number of threads to process request");
DEFINE_string(zk_hosts, "127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183",
	"Addresses of zookeeper service");
DEFINE_string(zk_service_name, "tutorial", "Name of this service in zookeeper "
	"service");
DEFINE_string(zk_node_name, "", "Name of this node, it will be the hostname if empty");
DEFINE_int32(log_level, 3, "Log level, 1 to 4 each means error, warn, info and debug");

int main(int argc, char **argv) {
	google::ParseCommandLineFlags(&argc, &argv, true);

	json_object *data = json_object_new_object();
	char address[128];
	sprintf(address, "127.0.0.1:%d", FLAGS_port);
	json_object_object_add(data, "address", json_object_new_string(address));
	tk_init(FLAGS_zk_hosts.c_str(), FLAGS_zk_service_name.c_str(), FLAGS_zk_node_name.c_str(),
		data, true);
	tk_set_log_level((tk_log_level_t) FLAGS_log_level);

	shared_ptr<CalculatorHandler> handler(new CalculatorHandler());
	shared_ptr<TProcessor> processor(new CalculatorProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(FLAGS_port));
	shared_ptr<TTransportFactory> transportFactory(
			new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	shared_ptr<ThreadManager> threadManager =
			ThreadManager::newSimpleThreadManager(FLAGS_worker_count);
	shared_ptr<PosixThreadFactory> threadFactory =
			shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();

	TThreadPoolServer server(processor, serverTransport, transportFactory,
			protocolFactory, threadManager);

	cout << "Starting the server..." << endl;
	server.serve();
	cout << "done." << endl;
	return 0;
}
